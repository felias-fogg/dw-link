void dwlrestart(void);
void blockIRQ();
void unblockIRQ();
void setupio();
void monitorSystemLoadState();
void initSession();
void reportFatalError(byte, boolean);
void setSysState(statetype);
void gdbHandleCmd();
void gdbParsePacket(const byte *);
void gdbParseMonitorPacket(byte *);
int gdbDetermineMonitorCommand(char *, char &);
void gdbUnknownCmd(void);
void gdbUnknownOpt(void);
void gdbAmbiguousCmd(void);
void gdbBreakOption(char arg);
void gdbHelp(void);
void gdbInfo(void);
void gdbReportTimers(void);
boolean gdbCheckMcu(void);
boolean stuckAtOneOrCap(void);
void setupDW(void);
boolean gdbStartConnect(boolean initialconnect);
boolean gdbConnectDW(void);
boolean gdbStopConnection(void);
boolean gdbDisconnectDW(void);
void gdbDwireOption(char arg);
void gdbReportConnected();
void gdbReportConnectionProblem(int, boolean);
void gdbReportLastError();
void gdbSteppingOption(char arg);
void gdbLoadOption(char arg);
void gdbOnlyOption(char arg);
void gdbVerifyOption(char arg);
void gdbTimerOption(char arg);
void gdbVersion();
void gdbSpeed(char);
void gdbSetMaxBPs(byte,boolean);
void gdbGetMaxBPs();
boolean autoPowerCycle(void);
boolean manualPowerCycle(void);
boolean powerCycle(boolean);
void power(boolean);
boolean gdbReset();
#if ISPMON
void gdbSetFuses(Fuses);
void gdbGetFuses(boolean, boolean);
#endif
void getInstruction(unsigned int &, unsigned int &);
boolean twoWordInstr(unsigned int);
void simTwoWordInstr(unsigned int, unsigned int);
byte gdbStep();
byte gdbContinue();
boolean gdbUpdateBreakpoints(boolean);
void insertionSort(unsigned int *, int);
int gdbFindBreakpoint(unsigned int);
void gdbHandleBreakpointCommand(const byte *);
boolean gdbInsertBreakpoint(unsigned int);
void gdbRemoveBreakpoint(unsigned int);
void gdbCleanupBreakpointTable();
void gdbReadRegisters();
void gdbWriteRegisters(const byte *);
void gdbReadMemory(const byte *);
void gdbHideBREAKs(unsigned int, byte *, int);
void gdbWriteMemory(const byte *, boolean);
int gdbBin2Mem(const byte *, byte *, int);
boolean targetOffline();
void flushInput();
void gdbSendByte(byte);
byte gdbReadByte();
void gdbSendReply(const char *);
void gdbSendSignal(byte);
void gdbSendBuff(const byte *, int);
void gdbSendPSTR(const char []);
void gdbState2Buf(byte);
void gdbSendState(byte);
void gdbReplyMessagePSTR(const char *, long);
void gdbReplyMessage(const char *);
void gdbDebugMessagePSTR(const char *, long);
void gdbMessage(const char *, long, boolean, boolean);
boolean targetDWConnect(boolean);
int targetISPConnect();
boolean targetStop();
int targetSetFuses(Fuses);
int targetGetClockFuses(Fuses &, Fuses &);
void targetReadFlashPage(unsigned int);
unsigned int targetReadFlashWord(unsigned int);
void targetReadFlash(unsigned int, byte *, unsigned int);
void targetReadSram(unsigned int, byte *, unsigned int);
void targetReadEeprom(unsigned int, byte *, unsigned int);
void targetWriteFlashPage(unsigned int);
void targetWriteFlash(unsigned int, byte *, unsigned int);
void targetFlushFlashProg();
void targetWriteSram(unsigned int, byte *, unsigned int);
void targetWriteEeprom(unsigned int, byte *, unsigned int);
void targetInitRegisters();
void targetSaveRegisters();
void targetRestoreRegisters();
void targetBreak();
void targetContinue();
void targetStep();
boolean targetReset();
boolean targetIllegalOpcode(unsigned int);
boolean doBreak(boolean);
boolean expectUCalibrate();
boolean expectBreakAndU();
void sendCommand(const uint8_t *, uint8_t);
unsigned int getResponse(unsigned int);
unsigned int getResponse(byte *, unsigned int);
unsigned int getWordResponse(byte);
void DWsetSpeed(byte);
byte outHigh(byte, byte);
byte outLow(byte, byte);
byte inHigh(byte, byte);
byte inLow(byte, byte);
void DWwriteRegisters(byte *);
void DWwriteRegister(byte, byte);
void DWreadRegisters(byte *);
byte DWreadRegister(byte, bool checkdwdr=false);
void DWwriteSramByte(unsigned int, byte);
void DWwriteIOreg(byte, byte);
byte DWreadSramByte(unsigned int);
byte DWreadIOreg(byte);
void DWreadSramBytes(unsigned int, byte *, byte);
byte DWreadEepromByte(unsigned int);
void DWwriteEepromByte(unsigned int, byte);
void DWreadFlash(unsigned int, byte *, unsigned int);
void ispDelay(boolean);
void DWeraseFlashPage(unsigned int);
void DWprogramFlashPage(unsigned int);
void DWloadFlashPageBuffer(unsigned int, byte *);
void DWreenableRWW();
byte DWreadSPMCSR();
unsigned int DWgetWPc(boolean);
unsigned int DWgetChipId();
void DWsetWPc(unsigned int);
void DWsetWBp(unsigned int);
void DWexecOffline(unsigned int);
void enableSpiPins();
void disableSpiPins();
byte ispTransfer(byte);
byte DWflushInput();
byte ispSend(byte, byte, byte, byte, boolean);
boolean enterProgramMode();
void leaveProgramMode();
unsigned int ispGetChipId();
byte ispReadFuse(boolean);
boolean ispProgramFuse(FuseByte, byte, byte);
boolean ispEraseFlash();
boolean ispLocked();
boolean setMcuAttr(unsigned int);
char nib2hex(byte);
byte hex2nib(char);
byte parseHex(const byte *, unsigned long *);
void convNum(byte *, long);
void convBufferHex2Ascii(char *, const byte *, int);
void measureRam();
void alltests();
void testSummary(int);
int testResult(bool);
void setupTestCode();
int gdbTests(int &);
int targetTests(int &);
int DWtests(int &);
void ISPprogramming(boolean);
byte getch();
void fill();
void empty_reply();
void breply (byte b);
void avrisp();
